factorial:                              // @factorial
        sub     sp, sp, #32                     // =32
        stp     x29, x30, [sp, #16]             // 16-byte Folded Spill
        add     x29, sp, #16                    // =16
        str     w0, [sp, #8]
        ldr     w8, [sp, #8]
        cbnz    w8, .LBB0_2
        mov     w8, #1
        stur    w8, [x29, #-4]
        b       .LBB0_5
.LBB0_2:
        ldr     w8, [sp, #8]
        cmp     w8, #1                          // =1
        b.ne    .LBB0_4
        mov     w8, #1
        stur    w8, [x29, #-4]
        b       .LBB0_5
.LBB0_4:
        ldr     w8, [sp, #8]
        ldr     w9, [sp, #8]
        subs    w0, w9, #1                      // =1
        str     w8, [sp, #4]                    // 4-byte Folded Spill
        bl      factorial
        ldr     w8, [sp, #4]                    // 4-byte Folded Reload
        mul     w9, w8, w0
        stur    w9, [x29, #-4]
.LBB0_5:
        ldur    w0, [x29, #-4]
        ldp     x29, x30, [sp, #16]             // 16-byte Folded Reload
        add     sp, sp, #32                     // =32
        ret
main:                                   // @main
        sub     sp, sp, #32                     // =32
        stp     x29, x30, [sp, #16]             // 16-byte Folded Spill
        add     x29, sp, #16                    // =16
        mov     w8, wzr
        stur    wzr, [x29, #-4]
        str     wzr, [sp, #8]
        mov     w0, #10
        str     w8, [sp, #4]                    // 4-byte Folded Spill
        bl      factorial
        str     w0, [sp, #8]
        ldr     w1, [sp, #8]
        adrp    x0, .L.str
        add     x0, x0, :lo12:.L.str
        bl      printf
        ldr     w8, [sp, #4]                    // 4-byte Folded Reload
        mov     w0, w8
        ldp     x29, x30, [sp, #16]             // 16-byte Folded Reload
        add     sp, sp, #32                     // =32
        ret
.L.str:
        .asciz  "Factorial of 10 = %d\n"